generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique
  name     String
  imageUrl String
  email    String

  servers  Server[]
  members  Member[]
  channels Channel[]

  // Optional: List of direct messages sent by this profile.
  sentDirectMessages DirectMessage[] @relation("DirectMessageSender")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")
}

model Server {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  inviteCode String @unique

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  // Since direct messages are now tied to Profile, these relations have been removed:
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  type ChannelType @default(TEXT)
  name String

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?
  deleted Boolean @default(false)

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  directMessages DirectMessage[]

  memberOneId String  @db.ObjectId
  memberOne   Profile @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String  @db.ObjectId
  memberTwo   Profile @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberOneId, memberTwoId])
  @@unique([memberTwoId, memberOneId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String  @db.ObjectId
  sender   Profile @relation("DirectMessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId])
  @@index([conversationId])
}